# Promtail Configuration for Academia Novit Challenge
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /positions/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # System logs
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system-logs
          host: academia-novit
          __path__: /var/log/*.log

  # Auth logs (important for security monitoring)
  - job_name: auth-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: auth-logs
          host: academia-novit
          __path__: /var/log/auth.log

  # Nginx logs (API access and errors)
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          host: academia-novit
          __path__: /var/log/nginx/api_access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>[\d\.]+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<request_uri>\S+) (?P<server_protocol>\S+)" (?P<status>\d+) (?P<bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          remote_addr:
          method:
          request_uri:
          status:
          bytes_sent:

  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          host: academia-novit
          __path__: /var/log/nginx/api_error.log

  # Docker container logs
  - job_name: docker-containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker-containers
          host: academia-novit
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - labels:
          stream:
      - timestamp:
          source: time
          format: RFC3339Nano
      - output:
          source: output

  # API Application logs (when containerized)
  - job_name: api-application
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/api-.*'
        target_label: __service__
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
      - source_labels: ['__meta_docker_container_id']
        target_label: container_id
      - source_labels: [__service__]
        target_label: job
        replacement: 'api-application'
    pipeline_stages:
      - json:
          expressions:
            level: level
            message: message
            timestamp: timestamp
            method: method
            url: url
            status: status
            response_time: response_time
            user_id: user_id
      - labels:
          level:
          method:
          status:
      - timestamp:
          source: timestamp
          format: RFC3339

  # PostgreSQL logs
  - job_name: postgres-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/postgres.*'
        target_label: __service__
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
      - source_labels: [__service__]
        target_label: job
        replacement: 'postgres'
    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}) (?P<timezone>\w+) \[(?P<pid>\d+)\] (?P<level>\w+):\s+(?P<message>.*)'
      - labels:
          level:
          pid:
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000'

  # Grafana logs
  - job_name: grafana-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/grafana.*'
        target_label: __service__
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
      - source_labels: [__service__]
        target_label: job
        replacement: 'grafana'

  # Prometheus logs
  - job_name: prometheus-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/prometheus.*'
        target_label: __service__
      - source_labels: ['__meta_docker_container_name']
        target_label: container_name
      - source_labels: [__service__]
        target_label: job
        replacement: 'prometheus'

# Limits to prevent excessive resource usage
limits_config:
  readline_rate: 10000
  readline_burst: 20000
