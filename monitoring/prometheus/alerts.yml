# Prometheus Alerting Rules for Academia Novit Challenge
groups:
  # API Performance Alerts
  - name: api_performance
    rules:
      # API health status down
      - alert: APIDown
        expr: api_health_status{service="api-prod"} == 0
        for: 1m
        labels:
          severity: critical
          component: api
        annotations:
          summary: "API is down"
          description: "API health status is unhealthy for more than 1 minute."

      # API response time > 2 segundos (via health check)
      - alert: APIHighResponseTime
        expr: api_health_response_time_seconds{service="api-prod"} > 2
        for: 5m
        labels:
          severity: warning
          component: api
        annotations:
          summary: "API response time is too high"
          description: "API health check response time is {{ $value }}s for more than 5 minutes."

      # API memory usage > 90%
      - alert: APIHighMemoryUsage
        expr: api_memory_percentage{service="api-prod"} > 90
        for: 5m
        labels:
          severity: warning
          component: api
        annotations:
          summary: "API memory usage is high"
          description: "API memory usage is {{ $value }}% for more than 5 minutes."

      # Database connection down
      - alert: DatabaseConnectionDown
        expr: api_database_status{service="api-prod"} == 0
        for: 1m
        labels:
          severity: critical
          component: database
        annotations:
          summary: "Database connection is down"
          description: "API cannot connect to the database for more than 1 minute."

      # Database response time > 1 segundo
      - alert: DatabaseHighResponseTime
        expr: api_database_response_time_seconds{service="api-prod"} > 1
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "Database response time is high"
          description: "Database response time is {{ $value }}s for more than 5 minutes."

  # System Resource Alerts
  - name: system_resources
    rules:
      # CPU usage > 80% por 10 minutos
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 10m
        labels:
          severity: warning
          component: system
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is {{ $value }}% on {{ $labels.instance }} for more than 10 minutes."

      # Memory usage > 90% por 5 minutos
      - alert: HighMemoryUsage
        expr: ((node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes) * 100 > 90
        for: 5m
        labels:
          severity: critical
          component: system
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is {{ $value }}% on {{ $labels.instance }} for more than 5 minutes."

      # Disk space < 10% disponible
      - alert: LowDiskSpace
        expr: ((node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes) * 100 > 90
        for: 1m
        labels:
          severity: critical
          component: system
        annotations:
          summary: "Low disk space detected"
          description: "Disk usage is {{ $value }}% on {{ $labels.instance }} {{ $labels.mountpoint }}."

  # Database Alerts
  - name: database
    rules:
      # PostgreSQL connections > 80% del lÃ­mite
      - alert: PostgreSQLHighConnections
        expr: (pg_stat_database_numbackends / pg_settings_max_connections) * 100 > 80
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "PostgreSQL connection usage is high"
          description: "PostgreSQL is using {{ $value }}% of available connections."

      # PostgreSQL down
      - alert: PostgreSQLDown
        expr: pg_up != 1
        for: 1m
        labels:
          severity: critical
          component: database
        annotations:
          summary: "PostgreSQL is down"
          description: "PostgreSQL database is not responding."

  # Security Alerts (based on available metrics)
  - name: security
    rules:
      # API uptime monitoring (if uptime drops, could indicate restarts)
      - alert: APIUptimeAnomaly
        expr: api_uptime_seconds{service="api-prod"} < 300
        for: 2m
        labels:
          severity: warning
          component: security
        annotations:
          summary: "API uptime anomaly detected"
          description: "API uptime is {{ $value }}s, indicating recent restart or instability."

      # Environment mismatch (security check)
      - alert: EnvironmentMismatch
        expr: api_environment_info{service="api-prod",environment="production"} != 1
        for: 1m
        labels:
          severity: warning
          component: security
        annotations:
          summary: "Environment mismatch detected"
          description: "API is not running in production environment."

  # Container and Docker Alerts
  - name: containers
    rules:
      # Container down
      - alert: ContainerDown
        expr: up{job=~"cadvisor|node-exporter|postgres-exporter"} != 1
        for: 5m
        labels:
          severity: critical
          component: infrastructure
        annotations:
          summary: "Container is down"
          description: "Container {{ $labels.job }} on {{ $labels.instance }} has been down for more than 5 minutes."

      # High container memory usage
      - alert: ContainerHighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 90
        for: 5m
        labels:
          severity: warning
          component: containers
        annotations:
          summary: "Container high memory usage"
          description: "Container {{ $labels.name }} is using {{ $value }}% of its memory limit."

      # High container CPU usage
      - alert: ContainerHighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) * 100 > 80
        for: 10m
        labels:
          severity: warning
          component: containers
        annotations:
          summary: "Container high CPU usage"
          description: "Container {{ $labels.name }} is using {{ $value }}% CPU for more than 10 minutes."

  # Network and Connectivity
  - name: network
    rules:
      # High network traffic
      - alert: HighNetworkTraffic
        expr: rate(node_network_receive_bytes_total[5m]) + rate(node_network_transmit_bytes_total[5m]) > 100000000 # 100MB/s
        for: 10m
        labels:
          severity: warning
          component: network
        annotations:
          summary: "High network traffic"
          description: "Network traffic on {{ $labels.instance }} {{ $labels.device }} is {{ $value }} bytes/s."

  # Monitoring Stack Alerts
  - name: monitoring
    rules:
      # Prometheus down
      - alert: PrometheusDown
        expr: up{job="prometheus"} != 1
        for: 1m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "Prometheus is down"
          description: "Prometheus monitoring system is not responding."

      # Grafana down
      - alert: GrafanaDown
        expr: up{job="grafana"} != 1
        for: 1m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "Grafana is down"
          description: "Grafana dashboard system is not responding."

      # Loki down
      - alert: LokiDown
        expr: up{job="loki"} != 1
        for: 1m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "Loki is down"
          description: "Loki log aggregation system is not responding."

      # JSON Exporter down
      - alert: JSONExporterDown
        expr: up{job="api-prod"} != 1
        for: 1m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "JSON Exporter is down"
          description: "API metrics exporter is not responding."
