# docker-compose.prod.yml
# VersiÃ³n unificada para despliegue en Docker Swarm

version: '3.8'

services:
  # --- INFRASTRUCTURE SERVICES ---

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/deploy/nginx/api.conf:/etc/nginx/conf.d/api.conf
      - /home/deploy/nginx/ssl:/etc/nginx/ssl # Para los certificados SSL
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]

  api-application:
    image: feerdus95/academia2025-challenge:latest
    networks:
      - app-net
    secrets:
      - postgres_password
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=academia2025_prod
      - DB_USER=postgres
      - DB_PASSWORD_FILE=/run/secrets/postgres_password
      - PORT=3000
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  postgres:
    image: postgres:15-alpine
    networks:
      - app-net
    secrets:
      - postgres_password
    environment:
      - POSTGRES_DB=academia2025_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./home/deploy/postgres/init:/docker-entrypoint-initdb.d
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # --- MONITORING SERVICES ---

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_USER}
      - GF_SMTP_FROM_NAME=Novit Monitoring
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-net
    deploy:
      mode: global

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-net
    deploy:
      mode: global

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/loki/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail_positions:/positions
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-net
    deploy:
      mode: global

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    secrets:
      - postgres_password
    volumes:
      - ./monitoring/postgres-exporter/queries.yml:/etc/postgres-exporter/queries.yml
    command:
      - --extend.query-path=/etc/postgres-exporter/queries.yml
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:@postgres:5432/academia2025_prod?sslmode=disable
      - PG_EXPORTER_PASSWORD_FILE=/run/secrets/postgres_password
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]

  json-exporter:
    image: prometheuscommunity/json-exporter:latest
    volumes:
      - ./monitoring/json-exporter/config.yml:/config.json
    command:
      - '--config.file=/config.json'
    networks:
      - app-net
    deploy:
      placement:
        constraints: [node.role == manager]
        
# --- VOLUMES & NETWORKS ---

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
  promtail_positions:

networks:
  app-net:
    driver: overlay

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt